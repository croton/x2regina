/* ---------------- Javascript ---------------- */
extension          = JS,JSON
code_type          = javascript
comment_prefix     = "/* "
comment_suffix     = "*/"
quick_comment      = "//"
comment_formatting = NONE;
margins            = 1 200 20 80
bookmarks          = 30

a-PFLine = "1=Dom 2=jQ 3=InFn 4=Par 5=Sib 6=StrT 7=IfNul 8=Search 9=CmtQ 10=Dif"
key a-F1 = MACRO fnpick jdom document.@
key a-F2 = MACRO fnpick jquery
key a-F3 = instr /function() {~}/
key a-F4 = MACRO navIndent PARENT
key a-F5 = MACRO navIndent SIBLING
key a-F6 = MACRO instr /`${~}`/
key a-F7 = MACRO instr /(typeof ~ === 'undefined') ? true : false/
key a-F8 = MACRO searchFileAtCursor
key a-F9 = MACRO cmt Q
key a-F10 = MACRO dif
key a-F11 = MACRO dif File
key a-F12 = MACRO showkeys

key a-0 = MSG [ES6] 1=Prof 2=Xp 3=Key 4=BkmP 5=LocFn
key a-1 = EDIT C:\Users\cpena\cjp\x2\es6.prof
key a-2 = MACRO chooser --c xs es6 --t Expander
key a-3 = MACRO chooser --c xk es6 --t JS Keys
key a-4 = MACRO bmprint
key a-5 = ALL /  function/
key a-6 = MACRO showkeys A
key a-7 = MACRO showkeys AL
key a-8 = MACRO showkeys C
key a-9 = MACRO showkeys CL

key a-` = MACRO wrapit `
key a-- = MACRO instr /$(~)/
key a-= = MACRO instr /${~}/
key a-; = MACRO instr /() => {~}/
key a-' = MACRO instr /="~"/
key a-\ = MACRO wrapblock { } outdent
key a-/ = MACRO wrapit {

expand_keyword = say
expand_replace = "console.log(\c);"

expand_keyword = v \1
expand_replace = 'var \1 = \c'

expand_keyword = ? \1
expand_replace = 'const \1 = \c'

expand_keyword = ?? \1
expand_replace = 'let \1 = \c'

expand_keyword = \1 ?o
expand_replace = "\1 {\c: ''};"

expand_keyword = "\1 -)"
expand_replace = '\1 function(\c) {'
expand_replace = '});'

expand_keyword = \1 ?p
expand_replace = '\1.prototype\c'

expand_keyword = fn
expand_replace = "function \c() {"
expand_replace = "}"

expand_keyword = fni
expand_replace = '(function(\c) {'
expand_replace = '})();'

expand_keyword = \1 ?fs
expand_replace = '\1 (function (\c) {'
expand_replace = '  return { };'
expand_replace = '})();'

expand_keyword = ofy
expand_replace = 'JSON.parse(\c);'

expand_keyword = sfy
expand_replace = 'JSON.stringify(\c);'

expand_keyword = rem \1
expand_replace = "delete \1['\c'];"

expand_keyword = "\1["
expand_replace = '\1[\c]'

expand_keyword = "\1("
expand_replace = '\1(\c)'

expand_keyword = "\1{"
expand_replace = '\1 \c{'
expand_replace = '}'

expand_keyword = @ \1
expand_replace = '\1: {\c'
expand_replace = '}'

expand_keyword = ifnul \1
expand_replace = "(typeof \1 === 'undefined') ? \c : \1;"

expand_keyword = has \1
expand_replace = "if (\1.hasOwnProperty('\c'))"

expand_keyword = is \1
expand_replace = "if (\1 instanceof \c)"

expand_keyword = type \1
expand_replace = "if (typeof \1==='\c')"

expand_keyword = isarr \1
expand_replace = "if (Array.isArray(\1)) \c"

expand_keyword = \1 -ea
expand_replace = '\1.forEach(\c => {'
expand_replace = '});'

expand_keyword = \1 -map
expand_replace = '\1.map(\c => );'

expand_keyword = \1 -fil
expand_replace = '\1.filter(\c => );'

expand_keyword = \1 -red
expand_replace = '\1.reduce((orig, curr) => {'
expand_replace = '  return orig;'
expand_replace = '  }, \c'
expand_replace = ');'

expand_keyword = do \1
expand_replace = "for (let i=1; i<=\1; i++) {\c"
expand_replace = "}"

expand_keyword = doarr \1
expand_replace = 'for (let i=0, len=\1.length; i<len; i++) {'
expand_replace = '\c\1[i];'
expand_replace = '}'

expand_keyword = keys
expand_replace = 'Object.keys(\c)'

expand_keyword = dodir \1
expand_replace = 'for (let key in \1) {'
expand_replace = '  // key \1[key]'
expand_replace = '}'

expand_keyword = ret, rt
expand_replace = 'return \c;'

expand_keyword = ter
expand_replace = "(\c ? 'T':'F')"

expand_keyword = if
expand_replace = "if (\c) ;"

expand_keyword = iff
expand_replace = "if (\c) {"
expand_replace = "}"

expand_keyword = ife
expand_replace = "if (\c) {"
expand_replace = "} else {"
expand_replace = "}"

expand_keyword = wh
expand_replace = "while (\c) {}"

expand_keyword = sw \1
expand_replace = 'switch (\1) {'
expand_replace = '  case "\c":'
expand_replace = '  break'
expand_replace = '  default:'
expand_replace = '} // \1'

expand_keyword = try
expand_replace = 'try {'
expand_replace = "  if (1) throw new Error('Oops');"
expand_replace = '} catch (e) {'
expand_replace = '  console.log(e.message);'
expand_replace = '}'

expand_keyword = \1 -then
expand_replace = '\1.then(function(\c) {'
expand_replace = '}, function(error) {'
expand_replace = '});'

expand_keyword = \1 -thenc
expand_replace = '\1.then(function(\c) {'
expand_replace = '}).catch(function(error) {'
expand_replace = '});'

expand_keyword = \1 -catch
expand_replace = '\1.catch(\cerror => {'
expand_replace = '});'

expand_keyword = mod \1
expand_replace = "const \1=(function () {"
expand_replace = "  const author='cjp';"
expand_replace = "  return {"
expand_replace = "    init:function() { console.log('Running \1 by', author); }"
expand_replace = "  };"
expand_replace = "})();"

expand_keyword = us
expand_replace = "'use strict';"

expand_keyword = exp
expand_replace = 'module.exports=\c;'

expand_keyword = req \1
expand_replace = "const \1=require('\c\1');"

expand_keyword = imp \1
expand_replace = 'import { \1 } from "\c\1";'

expand_keyword = click \1
expand_replace = "$(\c\1).click(function() {"
expand_replace = '});'

