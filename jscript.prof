/* ------------------------------- Javascript ------------------------------- */
extension          = JS,JSON
code_type          = javascript
comment_prefix     = "/* "
comment_suffix     = "*/"
quick_comment      = "//"
comment_formatting = NONE;
split_align_paren  = on
margins            = 1 200 20 80

a-PFLine = "1=AllFn 2=Xpdr 3=Key 4=Par 5=Sib 6=Sel 7=? 8=? 9=? 10=? 11=? 12=?"
key a-F1 = ALL /function/
key a-F2 = MACRO chooser --c xs jscript --t Expanders
key a-F3 = MACRO chooser --c xk jscript --t JS Keys
key a-F4 = MACRO navIndent PARENT
key a-F5 = MACRO navIndent SIBLING
key a-F6 = MACRO instr /$(~)/
key a-F7 = MSG Alt-F7
key a-F8 = MSG Alt-F8
key a-F9 = MSG Alt-F9
key a-F10 = MSG Alt-F10
key a-F11 = MSG Alt-F11
key a-F12 = MSG Alt-F12

key a-0 = MSG 1=Hlp 2=Prof
key a-1 = MSG Now using Javascript profile
key a-2 = EDIT C:\Users\cjp\x2\jscript.prof

key a-- = MACRO instr /: {~}/
key a-= = MACRO instr /: [~]/
key a-; = MACRO instr /: '~'/
key a-' = MACRO instr /function(){~}/
key a-\ = MACRO wrapline /'/',/
key a-/ = MACRO wrapit {
key a-` = MACRO instr /="~"/

expand_keyword = say
expand_replace = "console.log('\c');"

expand_keyword = v \1
expand_replace = 'var \1 = \c'

expand_keyword = vo \1
expand_replace = "var \1 = {\c: ''};"

expand_keyword = va \1
expand_replace = "var \1 = ['\c', ''];"

expand_keyword = @ \1
expand_replace = '\1: {\c'
expand_replace = '}'

expand_keyword = fn
expand_replace = "function \c() { }"

expand_keyword = fnc \1
expand_replace = 'function \1(name) {'
expand_replace = ' this.name=name;'
expand_replace = ' this.@=@;'
expand_replace = '}'

expand_keyword = fnv \1
expand_replace = '\1 = function(\c) {'
expand_replace = '};'

expand_keyword = fna \1
expand_replace = '\1: function(\c) {'
expand_replace = '},'

expand_keyword = fnp \1
expand_replace = '\c.prototype.\1=function() {'
expand_replace = '};'

expand_keyword = fni
expand_replace = '(function(\c) {'
expand_replace = '})();'

expand_keyword = fns \1
expand_replace = 'var \1 = (function (\c) {'
expand_replace = '  return { };'
expand_replace = '})();'

expand_keyword = "\1 -);"
expand_replace = '\1 function() {\c'
expand_replace = '});'

expand_keyword = bookmk \1
expand_replace = 'javascript:(function (){'
expand_replace = '})();'

expand_keyword = ofy
expand_replace = 'JSON.parse(\c);'

expand_keyword = sfy
expand_replace = 'JSON.stringify(\c);'

expand_keyword = rem \1
expand_replace = "delete \1['\c'];"

expand_keyword = "\1["
expand_replace = '\1[\c]'

expand_keyword = "\1("
expand_replace = '\1(\c)'

expand_keyword = "\1{"
expand_replace = '\1 \c{'
expand_replace = '}'

expand_keyword = arg \1
expand_replace = 'if (!\1) var \1=\c;'
expand_replace = "if (typeof \1==='undefined') var \1=\c;"

expand_keyword = has \1
expand_replace = "if (\1.hasOwnProperty('\c'))"

expand_keyword = is \1
expand_replace = "if (\1 instanceof \c)"

expand_keyword = type \1
expand_replace = "if (typeof \1==='\c')"

expand_keyword = isarr \1
expand_replace = "if (Array.isArray(\1)) \c"

expand_keyword = do \1
expand_replace = "for (var i=1; i<=\1; i=i+1) {"
expand_replace = "  \c"
expand_replace = "}"

expand_keyword = doarr \1
expand_replace = 'for (var i=0, len=\1.length; i<len; i++) {'
expand_replace = '\c\1[i];'
expand_replace = '}'

expand_keyword = dokey \1
expand_replace = '\cObject.keys(\1)'

expand_keyword = dodir \1
expand_replace = 'for (var key in \1) {'
expand_replace = '  // key \1[key]'
expand_replace = '}'

expand_keyword = dodirx \1
expand_replace = 'for (var i=0, key; key=\1[i]; i++) {'
expand_replace = '  \c'
expand_replace = '} // loop till null found'

expand_keyword = ret, rt
expand_replace = 'return \c;'

expand_keyword = if
expand_replace = "if (\c) ;"

expand_keyword = iff
expand_replace = "if (\c) {"
expand_replace = "}"

expand_keyword = ife
expand_replace = "if (\c) {"
expand_replace = "} else {"
expand_replace = "}"

expand_keyword = wh
expand_replace = "while (\c) {"
expand_replace = "}"

expand_keyword = sw \1
expand_replace = 'switch (\1.value) {'
expand_replace = '  case "\c":'
expand_replace = '  break'
expand_replace = '  default:'
expand_replace = '} // \1'

expand_keyword = try
expand_replace = 'try {'
expand_replace = "  if (1) throw new Error('Oops');"
expand_replace = '} catch (e) {'
expand_replace = '  console.log(e.message);'
expand_replace = '}'

expand_keyword = \1 -then
expand_replace = '\1.then(function(response) {\c'
expand_replace = '}, function(error) {'
expand_replace = '});'

expand_keyword = \1 -thenc
expand_replace = '\1.then(function(response) {\c'
expand_replace = '}).catch(function(error) {'
expand_replace = '});'

expand_keyword = newjs \1
expand_replace = "var \1=(function () {"
expand_replace = "  var author='cjp';"
expand_replace = "  return {"
expand_replace = "    run:function() {"
expand_replace = "      console.log('Running \1, by'+author);"
expand_replace = "    }"
expand_replace = "  };"
expand_replace = "})();"

expand_keyword = us
expand_replace = "'use strict';"

expand_keyword = exp
expand_replace = 'module.exports=\c;'

expand_keyword = req \1
expand_replace = "var \1=require('\c\1');"

expand_keyword = $ \1
expand_replace = "var \c=document.getElementById('\1');"

expand_keyword = elem \1
expand_replace = "var \c=document.createElement('\1');"

expand_keyword = tnode \1
expand_replace = "var \c=document.createTextNode('\1');"

expand_keyword = qsel \1
expand_replace = "var \c=document.querySelector('\1');"

