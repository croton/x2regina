/* ----------------- ReactJS ------------------ */
#include "es6.prof"

extension      = JS
base_extension = JS
code_type      = reactjs
highlight_tags = "<,>;"
tag_end        = "/"

a-PFLine = "1=App 2=GatsbyTool 3=Fn 4=Fn> 5=Sfy 6=StrT 7=TypeOf 8=Copy 9=ObjKey 10=CmtQ 11=WrapTry 12=Styles"
key a-F1 = CMDTEXT cmdin merge %cjp%\snips\reactapp.tmpl
key a-F2 = CMDText gb
key a-F12 = MACRO csspop 1 dev\globalcss

key a-0 = MSG [React] 1=Prof 2=ProfP 3=Xpdr 4=XpdrP 5=XpList 6=EditImport 7=Class 8=WrapTag 9=Prop
key a-1 = EDIT C:\Users\celes\cjp\x2\reactjs.prof
key a-2 = EDIT C:\Users\celes\cjp\x2\es6.prof
key a-3 = MACRO chooser --c xs reactjs|sort --t Expanders
key a-4 = MACRO chooser --c xs es6|sort --t Expander
key a-5 = MACRO cmdout xpdr-react.js xs reactjs
key a-6 = MACRO gb il
key a-7 = MACRO instr /className="~"/
key a-8 = CMDTEXT wraptag
key a-9 = MACRO instr /~={}/

/* Ctrl+Alt Keys */
key AltGr-0 = MSG Ctl-Alt-1=KeyHelp 2=Aria 3=IsArr 4=onChange 5=Handlers 6=Hook 7=StylesHelp 8=Log 9=RingP
key AltGr-2 = MACRO pick aria aria-@=""
key AltGr-3 = MACRO instr /Array.isArray(~)/
key AltGr-4 = MACRO instr /onChange={(e) => ~}/
key AltGr-5 = MACRO chooser onBlur onClick onChange --t Handlers --p @={}
key AltGr-6 = CMDTEXT cmdin merge %cjp%\snips\reacthook.tmpl
key AltGr-7 = CMDTEXT csspop ?
key AltGr-8 = MACRO instr /console.log(~);/
key AltGr-9 = MACRO ring P PATH

expand_keyword = \1 -xp
expand_macro = xp_htm

expand_keyword = co \1
expand_replace = 'const \1 = \c'

expand_keyword = v \1
expand_replace = 'let \1 = \c'

expand_keyword = impr
expand_replace = "import \cReact from 'react';"

expand_keyword = link \1
expand_replace = "import { Link } from 'gatsby';"
expand_replace = '<Link to={\1}>\c</Link>'

expand_keyword = fnc \1
expand_replace = 'export default function \1(props) {'
expand_replace = '  return ('
expand_replace = '    <div>\c{props}</div>'
expand_replace = '  );'
expand_replace = '};'

expand_keyword = st8 \1
expand_replace = 'const [\1, set\c\1] = useState();'

expand_keyword = fx
expand_replace = 'useEffect(() => {\c'
expand_replace = '  return () => { };'
expand_replace = '});'

expand_keyword = ihook
expand_replace = "import React, { useState, useEffect } from 'react';"

expand_keyword = hook \1
expand_replace = "import { useState, useEffect } from 'react';"
expand_replace = 'function use\1(\c) {'
expand_replace = '}'

expand_keyword = memo
expand_replace = 'useMemo(() => {'
expand_replace = '}, [\c]);'

expand_keyword = pr \1
expand_replace = '\1={\c\1}'

expand_keyword = map \1
expand_replace = '{\1.map((item, index) => {\c'
expand_replace = '})}'

expand_keyword = --
expand_replace = "/**"
expand_replace = ' * \c'
expand_replace = ' * @param'
expand_replace = ' * @return'
expand_replace = ' */'

expand_keyword = pq
expand_replace = "import { graphql } from 'gatsby';"
expand_replace = 'export const query = graphql`\c'
expand_replace = '`;'

expand_keyword = fq \1
expand_replace = 'export const query = graphql`'
expand_replace = '  fragment \c on \1 {'
expand_replace = '  }'
expand_replace = '`;'

/* TAGS */
expand_keyword = frag
expand_replace = '<Fragment\c>'
expand_replace = '</Fragment>'

expand_keyword = safe
expand_replace = '<Safe type="\c" content={} />'

expand_keyword = label \1
expand_replace = '<label htmlFor="\1">\c</label>'
expand_replace = '<input type="text" name="\1" id="\1" />'

expand_keyword = "?\1"
expand_replace = '<\1\c>'
expand_replace = '</\1>'

expand_keyword = "!\1"
expand_replace = '<\1>\c</\1>'

expand_keyword = "@\1"
expand_replace = '<\1 className="\c">'
expand_replace = '</\1>'

expand_keyword = "#\1"
expand_replace = '<\1 className="\c"></\1>'

expand_keyword = $\1
expand_replace = '<\1 \c/>'

